{"version":3,"sources":["configs/tree.tsx","components/tree-node-input.tsx","components/panel.tsx","components/tree-node.tsx","utils/tree.ts","components/tree-branch.tsx","components/tree.tsx","utils/list.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_LIST","name","weight","value","DEFAULT_NEW_NODE","TreeNodeInput","data","onChange","index","onRemove","useState","isWeightValid","setWeightValid","isValueValid","setValueValid","weightRef","React","createRef","valueRef","useEffect","current","Form","Control","size","el","target","length","ref","Number","isInteger","isInvalid","isNaN","Button","block","variant","onClick","Panel","list","onChangeList","style","marginTop","Table","striped","bordered","hover","map","node","newNode","i","updateList","filter","removeList","TreeNodeUI","height","flex","backgroundColor","alignItems","justifyContent","display","overflow","borderWidth","borderColor","borderStyle","textAlign","sumBranchWeight","branch","reduce","prev","cur","TreeBranch","remainWeight","maxWeight","TreeUtils","flexDirection","Tree","rowNum","onChangeRowNum","tree","a","n","balanced","len","out","Math","floor","push","slice","ceil","ListUtils","curBranch","curWeight","data-testid","InputGroup","Prepend","Text","id","Append","max","min","padding","branchIndex","App","setList","setRowNum","Container","Row","Col","sm","md","lg","newList","newRowNum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c72bc754.chunk.js","sourcesContent":["\nexport const DEFAULT_LIST = [\n\t{ name: \"A\", weight: 3, value: -0.02 },\n\t{ name: \"B\", weight: 3, value: 0.05 },\n\t{ name: \"C\", weight: 6, value: 0.015 },\n\t{ name: \"D\", weight: 2, value: -0.01 },\n\t{ name: \"E\", weight: 3, value: 0.01 },\n];\n\nexport const DEFAULT_ROW_NUM = 3;\n\nexport const DEFAULT_NEW_NODE = {\n\tname: 'NewNode',\n\tweight: 2,\n\tvalue: 0.05\n};\n\nexport const LIST_MAX_LENGTH = 50;\n\nexport const NODE_NAME_MAX_LENGTH = 49;","import React, {\n\tuseEffect,\n\tuseState\n} from 'react';\nimport { Button, Form } from \"react-bootstrap\";\n\nimport {\n\tNODE_NAME_MAX_LENGTH\n} from '../configs/tree';\n\nimport {\n  TreeNode\n} from '../types';\n\nexport default function TreeNodeInput({\n\tdata,\n\tindex,\n\tonChange,\n\tonRemove\n}: {\n\tdata: TreeNode\n\tindex: number\n\tonChange: (newNode: TreeNode) => void\n\tonRemove: () => void\n}) {\n\tconst [ isWeightValid, setWeightValid ] = useState<boolean>(true);\n\tconst [ isValueValid, setValueValid ] = useState<boolean>(true);\n\n\tconst {\n\t\tname,\n\t\tweight,\n\t\tvalue\n\t} = data;\n\n\tconst weightRef = React.createRef<HTMLInputElement>();\n\tconst valueRef = React.createRef<HTMLInputElement>();\n\n\t// Initial the latest weight and value once\n\tuseEffect(() => {\n\t\tfunction initWeight() {\n\t\t\tif (!!weightRef && !!weightRef.current) {\n\t\t\t\tweightRef.current.value = weight + '';\n\t\t\t}\n\t\t}\n\t\n\t\tfunction initValue() {\n\t\t\tif (!!valueRef && !!valueRef.current) {\n\t\t\t\tvalueRef.current.value = value + '';\n\t\t\t}\n\t\t}\n\n\t\tinitWeight();\n\t\tinitValue()\n\t}, []);\n\n\treturn (\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<Form.Control\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tonChange={(el) => {\n\t\t\t\t\t\tconst name = el.target.value;\n\n\t\t\t\t\t\tif (name.length <= NODE_NAME_MAX_LENGTH) {\n\t\t\t\t\t\t\tonChange({...data, name})\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<Form.Control\n\t\t\t\t\tref={weightRef}\n\t\t\t\t\t// value={weight}\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tonChange={(el) => {\n\t\t\t\t\t\tconst value = Number(el.target.value);\n\n\t\t\t\t\t\tif (Number.isInteger(value) && value > 0) {\n\t\t\t\t\t\t\tsetWeightValid(true)\n\n\t\t\t\t\t\t\tonChange({\n\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\tweight: value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetWeightValid(false)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tisInvalid={!isWeightValid}\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<Form.Control\n\t\t\t\t\tref={valueRef}\n\t\t\t\t\t// value={value}\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tonChange={(el) => {\n\t\t\t\t\t\tconst value = Number(el.target.value);\n\n\t\t\t\t\t\tif (!Number.isNaN(value)) {\n\t\t\t\t\t\t\tsetValueValid(true);\n\n\t\t\t\t\t\t\tonChange({\n\t\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetValueValid(false)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tisInvalid={!isValueValid}\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<Button block variant=\"danger\" size=\"sm\" onClick={onRemove}>\n\t\t\t\t\tX\n\t\t\t\t</Button>\n\t\t\t</td>\n\t\t</tr>\n\t)\n}","import React from 'react';\nimport { Button, Table } from \"react-bootstrap\";\n\nimport TreeNodeInput from './tree-node-input';\nimport {\n\tDEFAULT_NEW_NODE,\n\tLIST_MAX_LENGTH\n} from '../configs/tree';\n\nimport {\n  TreeNode\n} from '../types';\n\nexport default function Panel({\n\tlist,\n\tonChangeList\n}: {\n\tlist: TreeNode[]\n\tonChangeList: (newList: TreeNode[]) => void\n}) {\n\treturn (\n\t\t<div style={{marginTop: 20}}>\n\t\t\t<Table striped bordered hover size=\"sm\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t<th>Weight</th>\n\t\t\t\t\t\t<th>Value</th>\n\t\t\t\t\t\t<th></th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{list.map((node, index) => (\n\t\t\t\t\t\t<TreeNodeInput\n\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\tdata={node}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tonChange={(newNode: TreeNode) => onChangeList(updateList(list, newNode, index))}\n\t\t\t\t\t\t\tonRemove={() => onChangeList(removeList(list, index))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\n\t\t\t<Button variant=\"primary\" block onClick={() => {\n\t\t\t\tif (list.length < LIST_MAX_LENGTH) {\n\t\t\t\t\tonChangeList([...list, DEFAULT_NEW_NODE])\n\t\t\t\t}\n\t\t\t}}>\n\t\t\t\tAdd\n\t\t\t</Button>\n\t\t</div>\n\t)\n}\n\nfunction updateList(list: TreeNode[], newNode: TreeNode, index: number): TreeNode[] {\n\treturn list.map((node, i) => i === index ? newNode : node);\n}\n\nfunction removeList(list: TreeNode[], index: number): TreeNode[] {\n\treturn list.filter((node, i) => i !== index);\n}","import React from 'react';\n\nimport {\n  TreeNode\n} from '../types';\n\nexport default function TreeNodeUI({\n\tdata\n}: {\n\tdata: TreeNode\n}) {\n\treturn (\n\t\t<div style={{\n\t\t\theight: 100, \n\t\t\tflex: data.weight, \n\t\t\tbackgroundColor: data.value >= 0 ? 'green' : 'red',\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\t\t\tdisplay: 'flex',\n\t\t\toverflow: 'hidden',\n\t\t\tborderWidth: 1,\n\t\t\tborderColor: '#ccc',\n\t\t\tborderStyle: 'solid'\n\t\t}}>\n\t\t\t<div style={{textAlign: 'center'}}>\n\t\t\t\t<div>{data.name}</div>\n\t\t\t\t<div>{data.value}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}","import {\n  TreeNode\n} from '../types';\n\nexport function getTreeMaxWeight(tree: TreeNode[][]): number {\n\treturn tree.reduce((prev, curBranch) => {\n\t\tconst curWeight = sumBranchWeight(curBranch);\n\t\treturn prev > curWeight ? prev : curWeight;\n\t}, 0);\n}\n\nexport function sumBranchWeight(branch: TreeNode[]): number {\n\treturn branch.reduce((prev, cur) => {\n\t\treturn prev + cur.weight;\n\t}, 0);\n}","import React from 'react';\n\nimport TreeNodeUI from './tree-node';\nimport * as TreeUtils from '../utils/tree';\n\nimport {\n  TreeNode\n} from '../types';\n\nexport default function TreeBranch({\n\tdata,\n\tmaxWeight\n}: {\n\tdata: TreeNode[]\n\tmaxWeight: number\n}) {\n\tconst remainWeight = maxWeight - TreeUtils.sumBranchWeight(data);\n\n\treturn (\n\t\t<div style={{\n\t\t\tflexDirection: 'row', \n\t\t\tdisplay: 'flex'\n\t\t}}>\n\t\t\t{data.map((node, index) => (\n\t\t\t\t<TreeNodeUI\n\t\t\t\t\tkey={index}\n\t\t\t\t\tdata={node}\n\t\t\t\t/>\n\t\t\t))}\n\n\t\t\t{remainWeight > 0 ? <div style={{flex: remainWeight}}></div> : null}\n\t\t</div>\n\t)\n}","import React from 'react';\nimport {\n\tInputGroup,\n\tButton\n} from 'react-bootstrap';\n\nimport Branch from './tree-branch';\nimport * as TreeUtils from '../utils/tree';\nimport * as ListUtils from '../utils/list';\n\nimport {\n\tLIST_MAX_LENGTH\n} from '../configs/tree';\n\nimport {\n  TreeNode\n} from '../types';\n\nexport default function Tree({\n\tlist,\n\trowNum,\n\tonChangeRowNum\n}: {\n\tlist: TreeNode[]\n\trowNum: number\n\tonChangeRowNum: (newRowNum: number) => void\n}) {\n\tconst tree = ListUtils.balanceChunk(list, rowNum);\n\n\tif (tree.length === 0) {\n\t\treturn null;\n\t}\n\n\tconst maxWeight = TreeUtils.getTreeMaxWeight(tree);\n\n\treturn (\n\t\t<div data-testid=\"tree-map\" style={{marginTop: 20}}>\n\t\t\t<InputGroup>\n\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t<InputGroup.Text id=\"btnGroupAddon\">\n\t\t\t\t\t\tRows: {rowNum}\n\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={() => {\n\t\t\t\t\t\tonChangeRowNum(Math.max(--rowNum, 1))\n\t\t\t\t\t}}>\n\t\t\t\t\t\t-\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={() => {\n\t\t\t\t\t\tonChangeRowNum(Math.min(++rowNum, list.length))\n\t\t\t\t\t}}>\n\t\t\t\t\t\t+\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup.Append>\n\t\t\t</InputGroup>\n\n\t\t\t<div style={{\n\t\t\t\tborderWidth: 1, \n\t\t\t\tborderColor: '#ccc', \n\t\t\t\tborderStyle: 'solid',\n\t\t\t\tpadding: 10,\n\t\t\t\tmarginTop: 10\n\t\t\t}}>\n\t\t\t\t{tree.map((branch, branchIndex) => (\n\t\t\t\t\t<Branch \n\t\t\t\t\t\tkey={branchIndex}\n\t\t\t\t\t\tdata={branch}\n\t\t\t\t\t\tmaxWeight={maxWeight}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","\nexport function balanceChunk<T>(a: T[], n: number, balanced: boolean = true): T[][] {\n\tif (n < 2) return [a];\n\n\tvar len = a.length,\n\t\tout = [],\n\t\ti = 0,\n\t\tsize;\n\n\tif (len % n === 0) {\n\t\tsize = Math.floor(len / n);\n\n\t\twhile (i < len) {\n\t\t\tout.push(a.slice(i, i += size));\n\t\t}\n\t} else if (balanced) {\n\t\twhile (i < len) {\n\t\t\tsize = Math.ceil((len - i) / n--);\n\t\t\tout.push(a.slice(i, i += size));\n\t\t}\n\t} else {\n\t\tn--;\n\t\tsize = Math.floor(len / n);\n\n\t\tif (len % size === 0)\n\t\t\tsize--;\n\n\t\twhile (i < size * n) {\n\t\t\tout.push(a.slice(i, i += size));\n\t\t}\n\n\t\tout.push(a.slice(size * n));\n\t}\n\n\treturn out;\n}","import React, {\n  useState\n} from 'react';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Panel from './components/panel';\nimport Tree from './components/tree';\n\nimport { \n  Container,\n  Row,\n  Col, \n} from \"react-bootstrap\";\n\nimport {\n  TreeNode\n} from './types';\n\nimport {\n  DEFAULT_LIST,\n  DEFAULT_ROW_NUM\n} from './configs/tree';\n\nfunction App() {\n  const [ list, setList ] = useState<TreeNode[]>(DEFAULT_LIST);\n  const [ rowNum, setRowNum ] = useState<number>(DEFAULT_ROW_NUM);\n\n  return (\n    <Container>\n      <Row>\n        <Col sm={12} md={6} lg={6}>\n          <Panel \n            list={list} \n            onChangeList={(newList: TreeNode[]) => {\n              setList(newList)\n\n              if (newList.length < rowNum) {\n                setRowNum(newList.length);\n              }\n            }}\n          />\n        </Col>\n\n        <Col sm={12} md={6} lg={6}>\n          <Tree \n            list={list} \n            rowNum={rowNum}\n            onChangeRowNum={(newRowNum) => setRowNum(newRowNum)}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}